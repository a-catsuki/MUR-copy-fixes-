

// CAN receive handle
local receiveHandle = CanComms.RxOpenStandard(CAN.Bus, CAN.InverterTxID, CAN.BitsToIgnore, false);

// Receive CAN message
if (CanComms.RxMessage(receiveHandle)) {
	
	// Get Register ID
	CAN.RxStatus = Rx Status.Ok;
	local bitOffset = 64 - RegID.BitLength;
	RegID = CanComms.GetUnsignedInteger(receiveHandle, bitOffset, RegID.BitLength);
	
	// Compare RegID with known registers
	if (RegID eq Status.StatusMap.Register) { Status.UpdateStatus(receiveHandle);}
	else if (RegID eq Data.TempIGBT.Register) { Data.TempIGBT.Update(receiveHandle); }
	else if (RegID eq Status.EWMap.Register) { Status.UpdateEW(receiveHandle); }
	else if (RegID eq TorqueCmd.Register) { TorqueCmd.Update(receiveHandle); }	
	else if (RegID eq Data.RPM.Register) { Data.RPM.Update(receiveHandle); } 
	else if (RegID eq Data.CurrentAC.Register){ Data.CurrentAC.Update(receiveHandle); }
	else if (RegID eq Data.CurrentDC.Register){ Data.CurrentDC.Update(receiveHandle); } 
	else if (RegID eq Data.IqActual.Register) { Data.IqActual.Update(receiveHandle); }
	else if (RegID eq Data.TempMotor.Register) { Data.TempMotor.Update(receiveHandle); }

	else if (RegID eq Data.VoltageAC.Register) { Data.VoltageAC.Update(receiveHandle); }
	else if (RegID eq Data.VoltageDC.Register) { Data.VoltageDC.Update(receiveHandle); }
	else if (RegID eq Data.IMaxPk.Register) { Data.IMaxPk.Update(receiveHandle); }
	
} else {
	CAN.RxStatus = Rx Status.Waiting;
}	

receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xA5, 0x0, false);
if (CanComms.RxMessage(receiveHandle)){
	Data.RPM1 = CanComms.GetInteger(receiveHandle,16,16);
}

receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xA6, 0x0, false);
if (CanComms.RxMessage(receiveHandle)){
	Data.CurrentAC1 = 0.1*CanComms.GetInteger(receiveHandle,0,16);
}

receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xA6, 0x0, false);
if (CanComms.RxMessage(receiveHandle)){
	Data.CurrentDC1 = 0.1*CanComms.GetInteger(receiveHandle,48,16);
}

receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xA7, 0x0, false);
if (CanComms.RxMessage(receiveHandle)){
	Data.VoltageAC1 = 0.1*CanComms.GetInteger(receiveHandle,16,16);
}

receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xA7, 0x0, false);
if (CanComms.RxMessage(receiveHandle)){
	Data.VoltageDC1 = 0.1*CanComms.GetInteger(receiveHandle,0,16);
}

receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xA8, 0x0, false);
if (CanComms.RxMessage(receiveHandle)){
	Data.IqActual1 = CanComms.GetInteger(receiveHandle,48,16);
}

/*receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xC4, 0x0, true);
if (CanComms.RxMessage(receiveHandle)){
	Data.IMaxPk1 = CanComms.GetInteger(receiveHandle,40,16);
}*/

receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xA0, 0x0, false);
if (CanComms.RxMessage(receiveHandle)){
	Data.IGBTtemp1 = 0.1*CanComms.GetInteger(receiveHandle,0,16);
}

receiveHandle = CanComms.RxOpenStandard(CAN.Bus, 0xA2, 0x0, false);
if (CanComms.RxMessage(receiveHandle)){
	Data.Motortemp1 = 0.1*CanComms.GetInteger(receiveHandle,32,16);
}







//
//                       _oo0oo_
//                      o8888888o
//                      88" . "88
//                      (| -_- |)
//                      0\  =  /0
//                    ___/`---'\___
//                  .' \\|     |// '.
//                 / \\|||  :  |||// \
//                / _||||| -:- |||||- \
//               |   | \\\  -  /// |   |
//               | \_|  ''\---/''  |_/ |
//               \  .-\__  '-'  ___/-. /
//             ___'. .'  /--.--\  `. .'___
//          ."" '<  `.___\_<|>_/___.' >' "".
//         | | :  `- \`.;`\ _ /`;.`/ - ` : | |
//         \  \ `_.   \_ __\ /__ _/   .-` /  /
//     =====`-.____`.___ \_____/___.-`___.-'=====
//                       `=---='
//
//
//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//               Jason found this code has been wrong for 3 years, he ends up in praying
//
//
//